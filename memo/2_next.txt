왜 next 쓰냐?

실무에 도움되는 기능이 많음
프레임워크라 코딩의 자유도는 줄어든다.

ssr을 해주는게 강력한 기능이다.


브라우져 - 프론트 서버 - 백엔드 서버

- 전통적인 ssr 방식

브라우져가 페이지 요청
프론트 서버가 백엔드에 데이터를 요청
백엔드가 db에 쿼리해서 responsee
프론트 서버가 이 response를 뷰 템플릿으로 조립해서
html 만들어서 내려줌

장점 : 전체가 한 방에 그려지며 단순하다.
단점 : 느리다. 모든 요청에 모든 객체가 참여해야 한다.


- spa

페이지는 변하지 않고 하나의 페이지에서
컴포넌트만 갈아끼운다. 페이지 이동은 눈속임

프론트 서버는 html과 번들만 내려줌
데이터는 브라우져에서 데이터를 백엔드 서버와
직접 데이터 받음

장점 : 좀 더 역할 분담이 된다. 페이지 받는 건 빠르다.
단점 : 요청은 번들과 html 초기 렌더링은 느릴 거다.

      번들은 현재 필요한 컴포넌트 이외의 컴포넌트도 포함된 파일이다
        코드 스플리팅

      검색엔진은 텅 빈 html과 번들만 보고 아무것도 파싱못해갈 수도 있다.
        ssr

ssr도 prerender라는 방식이 있다.
유저와 검색엔진을 구분해서 작동

ssr
  프론트 서버에 첫 요청만 전통적인 방식으로 수행
  이 후의 라우트 이동은 react 방식을 따르는 하이브리드 방식

--------------------------------------------------------

ssr, 코드 스플리팅 필요없는 페이지
  어드민 페이지
그냥 리액트 쓰면 됨 ㅋㅋ
근데 일반적인 프로덕트는 next를 쓰는게 편하다.
뭐 쌩 react로 ssr, 코드 스플리팅 할 수 있다.

webpack


reactGo
  제로초가 react로 보일러 플레이트 만듦
  next쓰지 않고 ssr, code splitting 해 줌

-------------------------------------------------------

html 첫 요청, 새로고침은 만들어진 html을 내려줌
이 후의 라우트 이동은 csr

prefetch도 해준다.
초기 요청 후 이동 가능한 링크를 분석해서
미리 해당 chunk를 받아온다.